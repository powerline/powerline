#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''Powerline prompt and statusline script.'''
import argparse
import sys
import json

try:
	from powerline.core import Powerline
except ImportError:
	import os
	sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
	from powerline.core import Powerline  # NOQA

def oval(s):
	if '=' not in s:
		raise TypeError('Option must look like option=json_value')
	if s[0] == '_':
		raise ValueError('Options names must not start with `_\'')
	idx = s.index('=')
	o = s[:idx]
	val = json.loads(s[idx+1:])
	return (o, val)

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('ext', nargs=1)
parser.add_argument('side', nargs='?', choices=('left', 'right'))
parser.add_argument('-r', '--renderer_module', metavar='MODULE', type=str)
parser.add_argument('-w', '--width', type=int)
parser.add_argument('--last_exit_code', metavar='INT', type=int)
parser.add_argument('--last_pipe_status', metavar='LIST', default='', type=lambda s: [int(status) for status in s.split()])
parser.add_argument('-o', '--renderer_option', nargs='*', metavar='OPTION=VALUE', type=oval)

if __name__ == '__main__':
	args = parser.parse_args()
	powerline = Powerline(ext=args.ext[0], renderer_module=args.renderer_module, segment_info=args, renderer_options=dict(args.renderer_option or {}))
	rendered = powerline.renderer.render(width=args.width, side=args.side)
	try:
		sys.stdout.write(rendered)
	except UnicodeEncodeError:
		sys.stdout.write(rendered.encode('utf-8'))
