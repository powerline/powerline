#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''Powerline prompt and statusline script.'''
import argparse
import sys
import json

try:
	from powerline.shell import ShellPowerline
except ImportError:
	import os
	sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
	from powerline.shell import ShellPowerline  # NOQA

def oval(s):
	if '=' not in s:
		raise TypeError('Option must look like option=json_value')
	if s[0] == '_':
		raise ValueError('Option names must not start with `_\'')
	idx = s.index('=')
	o = s[:idx]
	val = json.loads(s[idx+1:])
	return (o, val)

def odotval(s):
	o, val = oval(s)
	keys = o.split('.')
	if len(keys) > 1:
		r = (keys[0], {})
		rcur = r[1]
		for key in keys[1:-1]:
			rcur[key] = {}
			rcur = rcur[key]
		rcur[keys[-1]] = val
		return r
	else:
		return (o, val)

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('ext', nargs=1)
parser.add_argument('side', nargs='?', choices=('left', 'right'))
parser.add_argument('-r', '--renderer_module', metavar='MODULE', type=str)
parser.add_argument('-w', '--width', type=int)
parser.add_argument('--last_exit_code', metavar='INT', type=int)
parser.add_argument('--last_pipe_status', metavar='LIST', default='', type=lambda s: [int(status) for status in s.split()])
parser.add_argument('-c', '--config', metavar='KEY.KEY=VALUE', type=odotval, action='append')
parser.add_argument('-t', '--theme_option', metavar='THEME.KEY.KEY=VALUE', type=odotval, action='append')
parser.add_argument('-p', '--config_path', metavar='PATH')

if __name__ == '__main__':
	args = parser.parse_args()
	powerline = ShellPowerline(args)
	rendered = powerline.renderer.render(width=args.width, side=args.side)
	try:
		sys.stdout.write(rendered)
	except UnicodeEncodeError:
		sys.stdout.write(rendered.encode('utf-8'))
